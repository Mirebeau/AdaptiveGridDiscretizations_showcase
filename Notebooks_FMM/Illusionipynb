{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The HFM library - A fast marching solver with adaptive stencils\n",
    "\n",
    "## Part : Application examples\n",
    "## Chapter : A mathematical model for Poggendorff's visual illusions\n",
    "\n",
    "This python notebook is *freely inspired* from the publication:  \n",
    "<a id='FMCS_2017'>[1]</a>\tB. Franceschiello, A. Mashtakov, G. Citti, and A. Sarti, “Modelling of the Poggendorff Illusion via Sub-Riemannian Geodesics in the Roto-Translation Group,” presented at the International Conference on Image Analysis and Processing, 2017, pp. 37–47.\n",
    "\n",
    "The main assumption in our experiments is that: if a curve in an image is occluded, then the visual cortex attemps to continue it with a geodesic w.r.t. the Reeds-Shepp model. This assumption is backed by the mathematical works of Petitot and Citti-Sarti, and the neuro-biological observations of Bosking, Angelis, et al, on the first layer V1 of the visual cortex.\n",
    "\n",
    "The model considered in this notebook is *simplified* in comparison with the one considered in the above paper. Indeed, the original model involves a data adaptive cost function, related to the activation of the cells of V1 implied by the input image, whereas we consider a constant cost function $c=1$ here.\n",
    "\n",
    "This notebook is intended as a companion notebook for the manuscript [(link)](https://hal.archives-ouvertes.fr/hal-01778322):  \n",
    "<a name=\"cite_MP18\"> [MP18] </a> Jean-Marie Mirebeau, Jorg Portegies, \"Hamiltonian Fast Marching: A numerical solver for anisotropic and non-holonomic eikonal PDEs\", 2018, submitted,\n",
    "and as documentation for the [HamiltonFastMarching (HFM) library](https://github.com/mirebeau/HamiltonFastMarching), which also has interfaces to the Matlab&reg; and Mathematica&reg; languages. It is part of a series, see the [summary](http://nbviewer.jupyter.org/urls/rawgithub.com/Mirebeau/HFM_Python_Notebooks/master/Summary.ipynb)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[**Summary**](Summary.ipynb) of volume Fast Marching Methods, this series of notebooks.\n",
    "\n",
    "[**Main summary**](../Summary.ipynb) of the Adaptive Grid Discretizations \n",
    "\tbook of notebooks, including the other volumes.\n",
    "\n",
    "# Table of contents\n",
    "  * [1. Sub-Riemannian extrapolation](#1.-Sub-Riemannian-extrapolation)\n",
    "  * [2. First Poggendorff illusion](#2.-First-Poggendorff-illusion)\n",
    "  * [3. Poggendorff's round illusion](#3.-Poggendorff's-round-illusion)\n",
    "\n",
    "\n",
    "\n",
    "This Python&reg; notebook is intended as documentation and testing for the [HamiltonFastMarching (HFM) library](https://github.com/mirebeau/HamiltonFastMarching), which also has interfaces to the Matlab&reg; and Mathematica&reg; languages. \n",
    "More information on the HFM library in the manuscript:\n",
    "* Jean-Marie Mirebeau, Jorg Portegies, \"Hamiltonian Fast Marching: A numerical solver for anisotropic and non-holonomic eikonal PDEs\", 2019 [(link)](https://hal.archives-ouvertes.fr/hal-01778322)\n",
    "\n",
    "Copyright Jean-Marie Mirebeau, University Paris-Sud, CNRS, University Paris-Saclay"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0. Importing the required libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys; sys.path.insert(0,\"..\") # Allow import of agd from parent directory (useless if conda package installed)\n",
    "#from Miscellaneous import TocTools; print(TocTools.displayTOC('Illusion','FMM'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from agd import Eikonal\n",
    "from agd.Plotting import savefig; #savefig.dirName = 'Figures/Illusion'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from copy import deepcopy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 0.1 Optional configuration\n",
    "Uncomment the following line to use the GPU eikonal solver. (Comment it for the CPU eikonal solver.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": [
     "EikonalGPU_config"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Returning a copy of module matplotlib.pyplot whose functions accept cupy arrays as input.\n",
      "Setting dictIn.default_mode = 'gpu' in module agd.Eikonal .\n"
     ]
    }
   ],
   "source": [
    "#from agd import AutomaticDifferentiation as ad; plt,Eikonal = map(ad.cupy_friendly,(plt,Eikonal))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Sub-Riemannian extrapolation\n",
    "\n",
    "The two visual illusions considered, due to Poggendorf, challenge our brain's ability to continue a straight or curved line in a region occluded by a vertical band. For both illusions, it is found that we tend to under-estimate the height $y_1$ at the arrival point. \n",
    "\n",
    "Following the cited [paper](#FMCS_2017), we model our brain's extrapolation procedure for lines occluded by a vertical band by the following optimization problem. The unknown $\\delta y$ determines the height $y_1+\\delta y$ on the right side of the vertical band. In the considered examples, the seemingly \"logical\" continuation (as a straight line, or a circle) would yield $\\delta y= 0$, but our brain and the sub-Riemannian model both select a negative value $\\delta y <0$.  The optimization problem reads:\n",
    "\\begin{equation*}\n",
    "    \\min_{\\delta y \\in [-\\delta_1,\\delta_2]} d_\\xi( (x_0,y_0,\\theta_0),\\ (x_1,y_1+\\delta y,\\theta_1) )\n",
    "\\end{equation*}\n",
    "We denoted by $d_\\xi$ the sub-Riemannian distance associated with the Reeds-Shepp model on $\\mathbb R^2 \\times \\mathbb P^1$, where $\\mathbb P^1 = [0,\\pi]$ with periodic boundary conditions. The parameter $\\xi$ balances the cost of phisical motion and of angular motion. The inverse $\\xi^{-1}$ is homogeneous to a radius of curvature. A large value of $\\xi$ yields a large penalization of the curvature of the physical projection of the path to be extracted. \n",
    "\n",
    "One weakness of the considered model is that it does not predict the value of parameter $\\xi$, which is thus adjusted by hand in the following examples. In addition, this parameter is expected to depend on the scale at which the picture is displayed.\n",
    "\n",
    "The metric of the $\\varepsilon$-relaxation of the Reeds-Shepp model, where $\\varepsilon>0$ is a relaxation parameter, reads as follows: for any point $(x,\\theta) \\in \\mathbb R^2 \\times \\mathbb P^1$ of the configuration space, and any tangent vector $(\\dot x, \\dot \\theta) \\in \\mathbb R^2 \\times \\mathbb R$, one has\n",
    "\\begin{equation*}\n",
    "F_{(x,\\theta)}(\\dot x,\\dot \\theta)^2 = <n(\\theta),\\dot x>^2 + \\varepsilon^{-2} <n(\\theta)^\\perp,\\dot x>^2 + \\xi^2 |\\dot \\theta|^2.\n",
    "\\end{equation*}\n",
    "We denoted $n(\\theta) := (\\cos \\theta,\\sin \\theta)$. The relaxation parameter $\\varepsilon$ formally equals $0$ for the genuine sub-Riemannian mathematical model. However, we need to set $\\varepsilon = 0.1$ numerically. In our brain's biological implementation, we expect that $\\varepsilon$ is likewise a small positive value.\n",
    "\n",
    "The function implemented in the next cell numerically solves the optimization problem that we introduced, using the HFM library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ReedsSheppContinuation(p0,p1,dy,n=100,n1=5,n2=1,nTheta=120,xi=1):\n",
    "    hfmIn = Eikonal.dictIn({\n",
    "        'model':'ReedsShepp2',\n",
    "        'geodesicSolver':'ODE',\n",
    "        'order':2,\n",
    "        'cost':1,\n",
    "        'xi':xi,\n",
    "        'projective':1,\n",
    "    })\n",
    "    \n",
    "    x0,y0,_ = p0\n",
    "    x1,y1,theta1 = p1\n",
    "    nDown,nUp = (n1,n2) if y1>y0 else (n2,n1)\n",
    "    hfmIn.SetRect([[min(x0,x1),max(x0,x1)],[min(y0,y1-nDown*dy),max(y0,y1+nUp*dy)]], \n",
    "                  dimx=n,sampleBoundary=True)\n",
    "    hfmIn.nTheta = nTheta\n",
    "\n",
    "    # First run : compute the best overall tip\n",
    "    h=hfmIn['gridScale']\n",
    "    hfmIn['seeds'] = [[x1,y1+n*h,theta1] for n in range(int(-nDown*dy/h),int(nUp*dy/h)+1)]\n",
    "    hfmIn['tips'] = [p0]\n",
    "    hfmOut1 = hfmIn.Run()\n",
    "\n",
    "    # Second run : compute the best suggested tip\n",
    "    hfmIn['seeds'] = [p0]\n",
    "    hfmIn['tips'] = [[x1,y1+n*dy,theta1] for n in range(-nDown,nUp+1)]\n",
    "    hfmIn['exportValues']=1\n",
    "    hfmOut2 = hfmIn.Run()\n",
    "\n",
    "    tipsI,_ = hfmIn.IndexFromPoint(hfmIn['tips'])\n",
    "    tipValues = hfmOut2['values'][tuple(tipsI.T)]\n",
    "        \n",
    "    return hfmOut1['geodesics'][0], hfmOut2['geodesics'], tipValues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting the kernel traits.\n",
      "Prepating the domain data (shape,metric,...)\n",
      "Preparing the problem rhs (cost, seeds,...)\n",
      "Preparing the GPU kernel\n",
      "Running the eikonal GPU kernel\n",
      "GPU kernel eikonal ran for 0.13352179527282715 seconds, and 60 iterations.\n",
      "Post-Processing\n",
      "!! Warning !! Unused keys from user : ['geodesicSolver']\n",
      "Setting the kernel traits.\n",
      "Prepating the domain data (shape,metric,...)\n",
      "Preparing the problem rhs (cost, seeds,...)\n",
      "Preparing the GPU kernel\n",
      "Running the eikonal GPU kernel\n",
      "GPU kernel eikonal ran for 0.1089940071105957 seconds, and 68 iterations.\n",
      "Post-Processing\n",
      "!! Warning !! Unused keys from user : ['geodesicSolver']\n"
     ]
    }
   ],
   "source": [
    "geoOpt, geoAll, tipValues = ReedsSheppContinuation([0,0,np.pi/4],[1,1,np.pi/4],0.1,xi=0.7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next cell shows the minimal geodesic for the considered optimization problem, which will appear as our brain's approximation of a straight line in the first Poggendorff illusion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=[3,3]); plt.title('Best Reeds-Shepp path'); plt.axis('equal'); plt.axis('off');\n",
    "plt.plot(geoOpt[0],geoOpt[1],color='red');\n",
    "savefig(fig,'ReedsSheppPath.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We next display a family of geodesics, from the left to the right of the domain, with the prescribed tangents, colored according to their length. (Shortest is darker)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def toGray(vals):\n",
    "    grays = np.sqrt(vals-min(vals))\n",
    "    grays = grays/max(grays)\n",
    "    return 0.8*grays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=[3,3]); plt.axis('equal'); plt.axis('off');\n",
    "plt.title('Reeds-Shepp paths.\\n Darker is shorter.',fontdict={'verticalalignment':'top'}); \n",
    "for geo,lvl in zip(geoAll,toGray(tipValues)):\n",
    "    plt.plot(geo[0],geo[1],color=str(lvl));\n",
    "savefig(fig,'ReedsSheppPaths.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. First Poggendorff illusion\n",
    "\n",
    "The first Poggendorff illusion challenges our brain's ability to continue a straight line occluded by a vertical band. The function implemented in the next cell displays the illusion, and returns the endpoints of the occluded segment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def BarIllusion(theta,r,w):\n",
    "    c,s=np.cos(theta),np.sin(theta)\n",
    "    fig = plt.figure()\n",
    "    plt.axis('equal')\n",
    "    plt.axis('off')\n",
    "    plt.plot([-c,-r*c],[-s,-r*s],color='black')\n",
    "    plt.plot([c,r*c],[s,r*s],color='black')\n",
    "    plt.plot([-r*c,-r*c],[-s,s],color='gray')\n",
    "    plt.plot([r*c,r*c],[-s,s],color='gray')\n",
    "    return fig,np.array([[-r*c,-r*s,theta],[r*c,r*s,theta]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When viewing the Poggendorff illusion, in the next cell, most people tend to think that the dark straight lines are not aligned, but that the right one is a little *too high*. This is actually not the case, as evidenced by the above python code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,endPts = BarIllusion(np.pi/6,0.2,10);\n",
    "plt.title('First Poggendorf illusion');\n",
    "savefig(fig,'FirstPoggendorffIllusion.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We next try to explain Poggendorff's illusion using the sub-Riemannian Reeds-Shepp model. The red curve supposedly accounts for our brain's completion of the left black line, in the space in between the two gray lines. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting the kernel traits.\n",
      "Prepating the domain data (shape,metric,...)\n",
      "Preparing the problem rhs (cost, seeds,...)\n",
      "Preparing the GPU kernel\n",
      "Running the eikonal GPU kernel\n",
      "GPU kernel eikonal ran for 0.0655219554901123 seconds, and 55 iterations.\n",
      "Post-Processing\n",
      "!! Warning !! Unused keys from user : ['geodesicSolver']\n",
      "Setting the kernel traits.\n",
      "Prepating the domain data (shape,metric,...)\n",
      "Preparing the problem rhs (cost, seeds,...)\n",
      "Preparing the GPU kernel\n",
      "Running the eikonal GPU kernel\n",
      "GPU kernel eikonal ran for 0.0690000057220459 seconds, and 58 iterations.\n",
      "Post-Processing\n",
      "!! Warning !! Unused keys from user : ['geodesicSolver']\n"
     ]
    }
   ],
   "source": [
    "geoOpt,geoAll,tipValues = ReedsSheppContinuation(endPts[0,:],endPts[1,:],0.02,xi=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,_ = BarIllusion(np.pi/6,0.2,10);\n",
    "plt.title('Subriemannian continuation prediction');\n",
    "plt.plot(geoOpt[0],geoOpt[1],color='red');\n",
    "savefig(fig,'FirstPoggendorffIllusion_Prediction.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,_ = BarIllusion(np.pi/6,0.2,10);\n",
    "plt.title('First Poggendorf illusion : subriemannian continuations.\\n Darker is shorter.',fontdict={'verticalalignment':'top'});\n",
    "for geo,lvl in zip(geoAll,toGray(tipValues)):\n",
    "    plt.plot(geo[0],geo[1],color=str(lvl));\n",
    "savefig(fig,'FirstPoggendorffIllusion_Choices.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Poggendorff's round illusion\n",
    "\n",
    "We next turn to a second illusion due to Poggendorff, involving the completion of a circular shape."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def RoundIllusion(theta1,theta2,w):\n",
    "    c1,s1 = np.cos(theta1),np.sin(theta1)\n",
    "    c2,s2 = np.cos(theta2),np.sin(theta2)\n",
    "    fig = plt.figure()\n",
    "    plt.axis('equal')\n",
    "    plt.axis('off')\n",
    "    plt.plot([c1,c1],[-1,1],color='grey')\n",
    "    plt.plot([c2,c2],[-1,1],color='grey')\n",
    "    I1 = np.linspace(-theta1,theta1,100)\n",
    "    I2 = np.linspace(theta2,2*np.pi-theta2,100)\n",
    "    plt.plot([np.cos(t) for t in I1],[np.sin(t) for t in I1],color='black',solid_capstyle='round')\n",
    "    plt.plot([np.cos(t) for t in I2],[np.sin(t) for t in I2],color='black',solid_capstyle='round')\n",
    "    return fig, np.array([[c1,s1,theta1+np.pi/2],[c2,s2,theta2+np.pi/2]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dark line is circular, yet most people feel that the occluded parts to not connect well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,endPts = RoundIllusion(np.pi/6,np.pi/3,6);\n",
    "plt.title('Round Poggendorf illusion');\n",
    "savefig(fig,'RoundPoggendorffIllusion.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting the kernel traits.\n",
      "Prepating the domain data (shape,metric,...)\n",
      "Preparing the problem rhs (cost, seeds,...)\n",
      "Preparing the GPU kernel\n",
      "Running the eikonal GPU kernel\n",
      "GPU kernel eikonal ran for 0.09900617599487305 seconds, and 63 iterations.\n",
      "Post-Processing\n",
      "!! Warning !! Unused keys from user : ['geodesicSolver']\n",
      "Setting the kernel traits.\n",
      "Prepating the domain data (shape,metric,...)\n",
      "Preparing the problem rhs (cost, seeds,...)\n",
      "Preparing the GPU kernel\n",
      "Running the eikonal GPU kernel\n",
      "GPU kernel eikonal ran for 0.1440129280090332 seconds, and 88 iterations.\n",
      "Post-Processing\n",
      "!! Warning !! Unused keys from user : ['geodesicSolver']\n"
     ]
    }
   ],
   "source": [
    "geoOpt,geoAll,tipValues = ReedsSheppContinuation(endPts[0,:],endPts[1,:],0.04,xi=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our brain's completion of the occluded part, according to the considered sub-Riemannian model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,_ = RoundIllusion(np.pi/6,np.pi/3,6);\n",
    "plt.title('Subriemannian continuation prediction');\n",
    "plt.plot(geoOpt[0],geoOpt[1],color='red');\n",
    "savefig(fig,'RoundPoggendorffIllusion_Prediction.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,_ = RoundIllusion(np.pi/6,np.pi/3,6);\n",
    "plt.title('Round Poggendorf illusion : subriemannian continuations.\\n Darker is shorter.');\n",
    "for geo,lvl in zip(geoAll,toGray(tipValues)):\n",
    "    plt.plot(geo[0],geo[1],color=str(lvl));\n",
    "savefig(fig,'RoundPoggendorffIllusion_Choices.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Format de la Cellule Texte Brut",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autocomplete": false,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
